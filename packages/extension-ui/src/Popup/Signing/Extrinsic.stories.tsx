// Copyright 2019-2023 @polkadot/extension authors & contributors
// SPDX-License-Identifier: Apache-2.0

import { Meta, StoryObj } from '@storybook/react';
import React from 'react';

import { metadataExpand } from '@polkadot/extension-chains/bundle';

import { getMetadata } from '../../messaging';
import Extrinsic from './Extrinsic';

type Mock = {
  (...args: unknown[]): unknown;
  // eslint-disable-next-line @typescript-eslint/ban-types
  setMockImpl(nextMockImpl: Function): void;
};

const meta = {
  component: Extrinsic,
  args: {
    url: 'https://azero.dev/'
  },
  parameters: {
    controls: {
      exclude: ['className']
    }
  },
  decorators: [
    (Story) => {
      (getMetadata as Mock).setMockImpl(() => Promise.resolve(metadataExpand(getChainMetadata())));

      return <Story />;
    }
  ]
} satisfies Meta<typeof Extrinsic>;

export default meta;

type Story = StoryObj<typeof meta>

const regularTransferRequestPayload = {
  specVersion: '0x00000040',
  transactionVersion: '0x0000000e',
  address: '5EkCk5SMQxUQGrULfDjsMeMCbcKoMgTd9ZBSrvMxiSDZUS86',
  blockHash: '0x55c4b9b7a0d3785fe9ea2fed21d58397fb40721d8a0d506ef1b31ed02803fbf9',
  blockNumber: '0x01fb85ca',
  era: '0xa81c',
  genesisHash: '0x05d5279c52c484cc80396535a316add7d47b1c5b9e0398dd1f584149341460c5',
  method: '0x0503007698471eccdaf1b0374546c6666a2014d641e6c8d6f60b4c24738aa09a65882d070010a5d4e8',
  nonce: '0x0000000d',
  signedExtensions: [
    'CheckNonZeroSender',
    'CheckSpecVersion',
    'CheckTxVersion',
    'CheckGenesis',
    'CheckMortality',
    'CheckNonce',
    'CheckWeight',
    'ChargeTransactionPayment',
  ],
  tip: '0x00000000000000000000000000000000',
  version: 4,
};

export const RegularTransfer: Story = {
  args: {
    requestPayload: regularTransferRequestPayload
  },
};

export const TheButtonSwapTransaction: Story = {
  args: {
    requestPayload: {
      specVersion: '0x00000040',
      transactionVersion: '0x0000000e',
      address: '5EkCk5SMQxUQGrULfDjsMeMCbcKoMgTd9ZBSrvMxiSDZUS86',
      blockHash: '0x9762900bce220cdf13889501ea4a03bd48b3e732fcb5d514eff9f57a88029253',
      blockNumber: '0x01fa6bb0',
      era: '0x081b',
      genesisHash: '0x05d5279c52c484cc80396535a316add7d47b1c5b9e0398dd1f584149341460c5',
      method:
        '0x12060009526e9aab507309a0a3eb3d8cc469fbf27dcfcb6b64c584e9680990274471920007d6d7314b043621180000910111004fa64755abb4d05d2a41cdaa7b7535a3c85b4725d26fee2a9951aeb95674c29bfb9c7e679fd870434fa882119e6e6125b4eef06ff8a170883e41851cb2b86e970d7d0010a5d4e80000000000000000000000000464f7a90000000000000000000000',
      nonce: '0x0000000d',
      signedExtensions: [
        'CheckNonZeroSender',
        'CheckSpecVersion',
        'CheckTxVersion',
        'CheckGenesis',
        'CheckMortality',
        'CheckNonce',
        'CheckWeight',
        'ChargeTransactionPayment',
      ],
      tip: '0x00000000000000000000000000000000',
      version: 4,
    }
  },
};

export const TheButtonTicketBatchTransaction: Story = {
  args: {
    requestPayload: {
      specVersion: '0x00000040',
      transactionVersion: '0x0000000e',
      address: '5EkCk5SMQxUQGrULfDjsMeMCbcKoMgTd9ZBSrvMxiSDZUS86',
      blockHash: '0xc8123d193dd0d278ff3616048b87cd9d954d9a6a4451ad669d40b2f7379ae2cf',
      blockNumber: '0x01fa2fb6',
      era: '0x681b',
      genesisHash: '0x05d5279c52c484cc80396535a316add7d47b1c5b9e0398dd1f584149341460c5',
      method:
        '0x0f0208120600773b39f04f3457df2c0e1a459dcb9137e6bd4be27a77e3bb5b54268e487461470003000032e90200080000d0b20f1bbdd039823d899f9f9bbdfbf763bc2c7c498fe426af1ed54573da230bb788713094000064a7b3b6e00d0000000000000000120600d039823d899f9f9bbdfbf763bc2c7c498fe426af1ed54573da230bb788713094000769862671030bff4f39278c04001055d7a21d',
      nonce: '0x00000009',
      signedExtensions: [
        'CheckNonZeroSender',
        'CheckSpecVersion',
        'CheckTxVersion',
        'CheckGenesis',
        'CheckMortality',
        'CheckNonce',
        'CheckWeight',
        'ChargeTransactionPayment',
      ],
      tip: '0x00000000000000000000000000000000',
      version: 4,
    }
  },
};

export const TheButtonSwapBatchTransaction: Story = {
  args: {
    requestPayload: {
      specVersion: '0x00000040',
      transactionVersion: '0x0000000e',
      address: '5EkCk5SMQxUQGrULfDjsMeMCbcKoMgTd9ZBSrvMxiSDZUS86',
      blockHash: '0x2b51dff9541913e577a1820e1ff20284d351c886fa0ce37ccc6b25caeb9ad3c4',
      blockNumber: '0x01fa69f3',
      era: '0x381f',
      genesisHash: '0x05d5279c52c484cc80396535a316add7d47b1c5b9e0398dd1f584149341460c5',
      method:
        '0x0f02081206004755abb4d05d2a41cdaa7b7535a3c85b4725d26fee2a9951aeb95674c29bfb9c0003000032e90200080000d0b20f1bbd09526e9aab507309a0a3eb3d8cc469fbf27dcfcb6b64c584e968099027447192000064a7b3b6e00d000000000000000012060009526e9aab507309a0a3eb3d8cc469fbf27dcfcb6b64c584e9680990274471920007002de5c5040bff4f39278c0400910111004fa64755abb4d05d2a41cdaa7b7535a3c85b4725d26fee2a9951aeb95674c29bfb9cccd12db4c1496aae7a33d77f1a6ec7071c0dfc2a357f3db816d5e581018a199c0010a5d4e8000000000000000000000000e40b54020000000000000000000000',
      nonce: '0x0000000a',
      signedExtensions: [
        'CheckNonZeroSender',
        'CheckSpecVersion',
        'CheckTxVersion',
        'CheckGenesis',
        'CheckMortality',
        'CheckNonce',
        'CheckWeight',
        'ChargeTransactionPayment',
      ],
      tip: '0x00000000000000000000000000000000',
      version: 4,
    }
  },
};

export const MissingChainMetadata: Story = {
  args: {
    requestPayload: regularTransferRequestPayload
  },
  decorators: [
    (Story) => {
      (getMetadata as Mock).setMockImpl(() => Promise.resolve(null));

      return <Story />;
    }
  ]
};

const getChainMetadata = () => ({
  "chain": "Aleph Zero Testnet",
  "chainType": "substrate",
  "color": "#00CCAB",
  "genesisHash": "0x05d5279c52c484cc80396535a316add7d47b1c5b9e0398dd1f584149341460c5",
  "icon": "substrate",
  "metaCalls": "",
  "specVersion": 64,
  "ss58Format": 42,
  "tokenDecimals": 12,
  "tokenSymbol": "TZERO",
  "types": {}
} as const);
